//layout mixins - start

@mixin mkdfTableLayout() {
    position: relative;
    display: table;
    table-layout: fixed;
    height: 100%;
    width: 100%;
}

@mixin mkdfTableCellLayout() {
    position: relative;
    display: table-cell;
    height: 100%;
    width: 100%;
    vertical-align: middle;
}

@mixin mkdfRelativeHolderLayout() {
    position: relative;
    display: inline-block;
    width: 100%;
    vertical-align: middle;
}

@mixin mkdfAbsoluteHolderLayout() {
    position: absolute;
    display: block;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
}

@mixin mkdfTypographyLayout() {
    color: inherit;
    font-family: inherit;
    font-size: inherit;
    font-weight: inherit;
    font-style: inherit;
    line-height: inherit;
    letter-spacing: inherit;
    text-transform: inherit;
}

//layout mixins - end

//transition mixins - start

@mixin mkdfTransition($transition-param...) {
    -webkit-transition: $transition-param;
    -moz-transition: $transition-param;
    transition: $transition-param;
}

@mixin mkdfTransform($transform-param...) {
    -webkit-transform: $transform-param;
    -moz-transform: $transform-param;
    transform: $transform-param;
}

@mixin mkdfAnimation($animation-param...) {
    -webkit-animation: $animation-param;
    -moz-animation: $animation-param;
    animation: $animation-param;
}

@mixin mkdfTransformOrigin($animation-param...) {
    -webkit-transform-origin: $animation-param;
    -moz-transform-origin: $animation-param;
    transform-origin: $animation-param;
}

@mixin mkdfPlaceholder {
    &::-webkit-input-placeholder {
        @content
    }
    &:-moz-placeholder {
        @content
    }
    &::-moz-placeholder {
        @content
    }
    &:-ms-input-placeholder {
        @content
    }
}

//transition mixins - end

/* Button mixins - start */
@mixin mkdfButtonDefaultStyle() {
    font-family: $default-heading-font;
    position: relative;
    display: inline-block;
    vertical-align: middle;
    width: auto;
    outline: none;
    line-height: 1em;
    font-weight: 500;
    box-sizing: border-box;
    -webkit-border-radius: 5px;
    -moz-border-radius: 5px;
    border-radius: 5px;
    margin: 0;
    @include mkdfTransition(color .2s ease-out, background-color .2s ease-out, border-color .2s ease-out);
}

@mixin mkdfButtonTransparentColor() {
    color: $default-text-color;
    background-color: transparent;
}

@mixin mkdfButtonSolidColor() {
    color: #fff;
    background-color: $first-main-color;
}

@mixin mkdfButtonSolidLightColor() {
    color: $default-heading-color;
    background-color: #ffffff;
}

@mixin mkdfButtonSolidHoverColor() {
    color: #fff;
    background-color: #37c7be;
}

@mixin mkdfButtonOutlineColor() {
    color: #333;
    background-color: transparent;
    border: 2px solid $first-main-color;
}

@mixin mkdfButtonOutlineHoverColor() {
    color: #fff;
    background-color: $first-main-color;
    border-color: $first-main-color;
}

@mixin mkdfButtonSmallParams() {
    padding: 14px 18px;
    font-size: 13px;
}

@mixin mkdfButtonMediumParams() {
    padding: 16px 23px ;
    font-size: 14px;
}

@mixin mkdfButtonLargeParams() {
    padding: 18px 45px;
    font-size: 15px;
}

@mixin mkdfButtonHugeParams() {
    display: block;
    text-align: center;
    padding: 18px 45px;
    font-size: 15px;
}

/* Button mixins - end */

//media query mixins - start

@mixin laptop-landscape-large {
    @media only screen and (max-width: map-get($breakpoints, laptop-landscape-large)) {
        @content;
    }
}

@mixin laptop-landscape-medium {
    @media only screen and (max-width: map-get($breakpoints, laptop-landscape-medium)) {
        @content;
    }
}

@mixin laptop-landscape {
    @media only screen and (max-width: map-get($breakpoints, laptop-landscape)) {
        @content;
    }
}

@mixin ipad-landscape {
    @media only screen and (max-width: map-get($breakpoints, ipad-landscape)) {
        @content;
    }
}

@mixin ipad-portrait {
    @media only screen and (max-width: map-get($breakpoints, ipad-portrait)) {
        @content;
    }
}

@mixin phone-landscape {
    @media only screen and (max-width: map-get($breakpoints, phone-landscape)) {
        @content;
    }
}

@mixin phone-portrait {
    @media only screen and (max-width: map-get($breakpoints, phone-portrait)) {
        @content;
    }
}

@mixin smaller-phone-portrait {
    @media only screen and (max-width: map-get($breakpoints, smaller-phone-portrait)) {
        @content;
    }
}

//media query mixins - end

//animation mixin - start

@mixin keyframes($name) {
    @-webkit-keyframes #{$name} {
        @content
    }
;
    @keyframes #{$name} {
        @content
    }
;
}

@mixin animation($name, $duration, $repeat, $timing, $delay) {
    -webkit-animation-name: $name;
    -webkit-animation-duration: $duration;
    -webkit-animation-iteration-count: $repeat;
    -webkit-animation-timing-function: $timing;
    -webkit-animation-delay: $delay;
    -webkit-animation-fill-mode: forwards; /* this prevents the animation from restarting! */

    animation-name: $name;
    animation-duration: $duration;
    animation-iteration-count: $repeat;
    animation-timing-function: $timing;
    animation-delay: $delay;
    animation-fill-mode: forwards; /* this prevents the animation from restarting! */
}

//animation mixin - end


//perfect scroll mixins - start
@mixin scrollbar-rail-default($theme) {
    display: none;
    position: absolute; /* please don't change 'position' */
    opacity: map_get($theme, rail-default-opacity);
    transition: background-color .2s linear, opacity .2s linear;
}

@mixin scrollbar-rail-hover($theme) {
    background-color: map_get($theme, rail-hover-bg);
    opacity: map_get($theme, rail-hover-opacity);
}

@mixin scrollbar-default($theme) {
    position: absolute; /* please don't change 'position' */
    background-color: map_get($theme, bar-container-hover-bg);
    border-radius: map_get($theme, border-radius);
    transition: background-color .2s linear, height .2s linear, width .2s ease-in-out,
    border-radius .2s ease-in-out;
}

@mixin scrollbar-hover($theme) {
    background-color: map_get($theme, bar-hover-bg);
}

@mixin in-scrolling($theme) {
    &.ps--in-scrolling {
        &.ps--x > .ps__scrollbar-x-rail {
            @include scrollbar-rail-hover($theme);
            > .ps__scrollbar-x {
                @include scrollbar-hover($theme);
                height: map_get($theme, scrollbar-x-hover-height);
            }
        }
        &.ps--y > .ps__scrollbar-y-rail {
            @include scrollbar-rail-hover($theme);
            > .ps__scrollbar-y {
                @include scrollbar-hover($theme);
                width: map_get($theme, scrollbar-y-hover-width);
            }
        }
    }
}

// Layout and theme mixin
@mixin ps-container($theme) {
    -ms-touch-action: auto;
    touch-action: auto;
    overflow: hidden !important;
    -ms-overflow-style: none;

    // Edge
    @supports (-ms-overflow-style: none) {
        overflow: auto !important;
    }
    // IE10+
    @media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {
        overflow: auto !important;
    }

    &.ps--active-x > .ps__scrollbar-x-rail,
    &.ps--active-y > .ps__scrollbar-y-rail {
        display: none; /* Switched from block to none by Theme Author to hide the rulers */
        background-color: map_get($theme, bar-bg);
    }

    @include in-scrolling($theme);

    > .ps__scrollbar-x-rail {
        @include scrollbar-rail-default($theme);
        bottom: map_get($theme, scrollbar-x-rail-bottom); /* there must be 'bottom' for ps__scrollbar-x-rail */
        height: map_get($theme, scrollbar-x-rail-height);

        > .ps__scrollbar-x {
            @include scrollbar-default($theme);
            bottom: map_get($theme, scrollbar-x-bottom); /* there must be 'bottom' for ps__scrollbar-x */
            height: map_get($theme, scrollbar-x-height);
        }
        &:hover,
        &:active {
            > .ps__scrollbar-x {
                height: map_get($theme, scrollbar-x-hover-height);
            }
        }
    }

    > .ps__scrollbar-y-rail {
        @include scrollbar-rail-default($theme);
        right: map_get($theme, scrollbar-y-rail-right); /* there must be 'right' for ps__scrollbar-y-rail */
        width: map_get($theme, scrollbar-y-rail-width);

        > .ps__scrollbar-y {
            @include scrollbar-default($theme);
            right: map_get($theme, scrollbar-y-right); /* there must be 'right' for ps__scrollbar-y */
            width: map_get($theme, scrollbar-y-width);
        }
        &:hover,
        &:active {
            > .ps__scrollbar-y {
                width: map_get($theme, scrollbar-y-hover-width);
            }
        }
    }

    &:hover {
        @include in-scrolling($theme);

        > .ps__scrollbar-x-rail,
        > .ps__scrollbar-y-rail {
            opacity: map_get($theme, rail-container-hover-opacity);
        }

        > .ps__scrollbar-x-rail:hover {
            @include scrollbar-rail-hover($theme);

            > .ps__scrollbar-x {
                @include scrollbar-hover($theme);
            }
        }

        > .ps__scrollbar-y-rail:hover {
            @include scrollbar-rail-hover($theme);

            > .ps__scrollbar-y {
                @include scrollbar-hover($theme);
            }
        }
    }
}
//perfect scroll mixins - end